/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
LuftikusAudioProcessorEditor::LuftikusAudioProcessorEditor (LuftikusAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter),
	  Proc(ownerFilter),
	  mastering("Mastering"),
	  analog("Analog"),
	  keepGain("Keep Gain"),
	  showTooltips("Tooltips"),
	  masterVolLabel("MasterVol", "Trim")
{
	for (int i=0; i<EqDsp::kNumTypes; ++i)
	{
		addAndMakeVisible(&sliders[i]);
		addAndMakeVisible(&labels[i]);
		
		//sliders[i].setRange(-10, 10, 1);
		sliders[i].addListener(this);
		sliders[i].setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
		sliders[i].setSliderStyle(Slider::RotaryVerticalDrag);
		labels[i].setText(Proc->getParameterName(i), false);
	}

	setLookAndFeel(&lookAndFeel);

	updateSliders();

	addAndMakeVisible(&mastering);
	mastering.addListener(this);
	addAndMakeVisible(&analog);
	analog.addListener(this);
	addAndMakeVisible(&keepGain);
	keepGain.addListener(this);

	for (int i=0; i<EqDsp::kNumHighSelves; ++i)
	{
		addAndMakeVisible(&types[i]);
		types[i].addListener(this);
		types[i].setRadioGroupId(674);
	}

	{
		types[0].setButtonText("Off");
		types[1].setButtonText("2k5");
		types[2].setButtonText(" 5k");
		types[3].setButtonText("10k");
		types[4].setButtonText("20k");
		types[5].setButtonText("40k");
	}

	{
		addAndMakeVisible(&masterVol);
		masterVol.addListener(this);
		masterVol.setTextBoxStyle(Slider::TextBoxRight, false, 50, 13);
		masterVol.setSliderStyle(Slider::RotaryVerticalDrag);
		Range<float> volRange(Proc->getMasterVolume().getRangeDb());
		masterVol.setRange(volRange.getStart(), volRange.getEnd(), 0.1);

		addAndMakeVisible(&masterVolLabel);
		//masterVolLabel.setFont(Font(10.f));
	}

	{
		sliders[EqDsp::kBand10].setTooltip("Gain/cut 10 Hz band");
		sliders[EqDsp::kBand40].setTooltip("Gain/cut 40 Hz band");
		sliders[EqDsp::kBand160].setTooltip("Gain/cut 160 Hz band");
		sliders[EqDsp::kBand640].setTooltip("Gain/cut 640 Hz band");
		sliders[EqDsp::kShelf2k5].setTooltip("Gain/cut 2.5 kHz high shelf");
		sliders[EqDsp::kShelfHi].setTooltip("High shelf boost");

		masterVol.setTooltip("Output volume trim (in dB)");

		types[0].setTooltip("High shelf boost off");
		types[1].setTooltip("High shelf boost @ 2.5 kHz");
		types[2].setTooltip("High shelf boost @ 5 kHz");
		types[3].setTooltip("High shelf boost @ 10 kHz");
		types[4].setTooltip("High shelf boost @ 20 kHz");
		types[5].setTooltip("High shelf boost @ 40 kHz");

		mastering.setTooltip("Enable mastering mode");
		analog.setTooltip("Enable analog emulation");
		keepGain.setTooltip("Avoid overall gain boosts/cuts when applying EQ gain");

		addAndMakeVisible(&showTooltips);
		showTooltips.addListener(this);

		updateTooltipState();
	}

	background = ImageCache::getFromMemory(BinaryData::bg_png, BinaryData::bg_pngSize);
	luftikus = ImageCache::getFromMemory(BinaryData::luftikus_png, BinaryData::luftikus_pngSize);

	setSize (500, 140);
	startTimer(100);
}

LuftikusAudioProcessorEditor::~LuftikusAudioProcessorEditor()
{
	tooltips = nullptr;
}


void LuftikusAudioProcessorEditor::resized()
{
	for (int i=0; i<EqDsp::kNumTypes; ++i)
	{
		const int x = 10+i*70 + (i==EqDsp::kShelfHi ? 20 : 0);
		const int yl = 25 - (i & 1) * 20;
		const int ys = yl + 20;
		labels[i].setBounds(x, yl, 70, 20);
		sliders[i].setBounds(x, ys, 70, 60);
	}

	const int x0 = 10 + EqDsp::kNumTypes*70 + 18;

	for (int i=0; i<EqDsp::kNumHighSelves; ++i)
		types[i].setBounds(x0, 7+i*15, 50, 18);

	mastering.setBounds(205, 117, 100, 20);
	analog.setBounds(305, 117, 100, 20);
	keepGain.setBounds(405, 117, 90, 20);

	showTooltips.setBounds(140, 117, 60, 20);

	masterVolLabel.setBounds(380, 100, 40, 20);
	masterVol.setBounds(420, 100, 70, 20);
}

//==============================================================================
void LuftikusAudioProcessorEditor::paint (Graphics& g)
{
    g.setColour (Colours::black);
	g.drawImageAt(background, 0, 0);
	g.drawRect(0, 0, getWidth(), getHeight(), 2);

	g.setColour(Colours::white.withAlpha(0.3f));
	g.drawRect(380, 5, 115, 97);
	g.drawRect(205, 117, 290, 20);

	g.setColour(Colours::black);
	g.drawImageAt(luftikus, 4, 114);
}

void LuftikusAudioProcessorEditor::timerCallback()
{
	for (int i=0; i<EqDsp::kShelfHi; ++i)
	{
		const double newValue = Proc->getParameter(i)*20-10;

		if (fabs(sliders[i].getValue() - newValue) > 0.05)
			sliders[i].setValue(newValue, dontSendNotification);
	}

	{
		const double newValue = Proc->getParameter(EqDsp::kShelfHi)*10;

		if (sliders[EqDsp::kShelfHi].getValue() != newValue)
			sliders[EqDsp::kShelfHi].setValue(newValue, dontSendNotification);
	}

	{
		const double newValue = Proc->getMasterVolume().getVolumeDb();

		if (fabs(masterVol.getValue() - newValue) > 0.05)
			masterVol.setValue(newValue, dontSendNotification);
	}

	{
		const float procVal = Proc->getParameter(EqDsp::kNumTypes);
		const int newType = /*1 + */int(procVal * (EqDsp::kNumHighSelves -1));		
		jassert(newType >=0 && newType < EqDsp::kNumHighSelves);

		int curType = -1;
		for (int i=0; i<EqDsp::kNumHighSelves; ++i)
			if (types[i].getToggleState())
				curType = i;

		if (curType != newType && newType >=0 && newType < EqDsp::kNumHighSelves)
		{
			//DBG ("timer setting " + String(newType) + " (Procval=" + String(procVal));
			//type.setSelectedId(newType, true);
			types[newType].setToggleState(true, false);
		}
	}

	{
		const bool procAnalog = Proc->getParameter(LuftikusAudioProcessor::kAnalog) > 0.5f;
		const bool procMastering = Proc->getParameter(LuftikusAudioProcessor::kMastering) > 0.5f;
		const bool procKeepGain = Proc->getParameter(LuftikusAudioProcessor::kKeepGain) > 0.5f;

		if (procAnalog != analog.getToggleState())
			analog.setToggleState(procAnalog, dontSendNotification);

		if (procMastering != mastering.getToggleState())
		{
			mastering.setToggleState(procMastering, dontSendNotification);
			updateSliders();
		}

		if (procKeepGain != keepGain.getToggleState())
			keepGain.setToggleState(procKeepGain, dontSendNotification);
	}

	{
		showTooltips.setToggleState(Proc->showTooltips, false);
	}
}


void LuftikusAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
	for (int i=0; i<EqDsp::kShelfHi; ++i)
	{
		if (&sliders[i] == slider)
		{
			const float newValue = (float) sliders[i].getValue() / 20.f + 0.5f;
			Proc->setParameterNotifyingHost(i, newValue);
			return;
		}
	}

	if (&sliders[EqDsp::kShelfHi] == slider)
	{
		const float newValue = (float) sliders[EqDsp::kShelfHi].getValue() / 10.f;
		Proc->setParameterNotifyingHost(EqDsp::kShelfHi, newValue);
	}
	else if (slider == &masterVol)
	{
		const float newValue = Proc->getMasterVolume().plainToNormalized((float) masterVol.getValue());
		Proc->setParameterNotifyingHost(LuftikusAudioProcessor::kMasterVol, newValue);
	}
}

void LuftikusAudioProcessorEditor::comboBoxChanged (ComboBox* comboBoxThatHasChanged)
{
	if (&type == comboBoxThatHasChanged)
	{
		const float newValue = (type.getSelectedId() - 1.f) / float(EqDsp::kNumHighSelves - 1.f);
		//DBG ("listerner reading " +String(type.getSelectedId()) + " (newValue=" + String(newValue));
		Proc->setParameterNotifyingHost(EqDsp::kNumTypes, newValue);
	}
}


void LuftikusAudioProcessorEditor::buttonClicked (Button* button)
{
	if (button == &mastering)
	{
		Proc->setParameterNotifyingHost(LuftikusAudioProcessor::kMastering, mastering.getToggleState() ? 1.f : 0.f);
		updateSliders();
	}
	else if (button == &analog)
	{
		Proc->setParameterNotifyingHost(LuftikusAudioProcessor::kAnalog, analog.getToggleState() ? 1.f : 0.f);
	}
	else if (button == &keepGain)
	{
		Proc->setParameterNotifyingHost(LuftikusAudioProcessor::kKeepGain, keepGain.getToggleState() ? 1.f : 0.f);		
	}
	else if (button == &showTooltips)
	{
		Proc->showTooltips = ! Proc->showTooltips;
		updateTooltipState();
	}
	else
	{
		for (int i=0; i<EqDsp::kNumHighSelves; ++i)
		{
			if (button == &types[i])
			{
				const float newValue = i / float(EqDsp::kNumHighSelves - 1.f);
				Proc->setParameterNotifyingHost(EqDsp::kNumTypes, newValue);		
				break;
			}
		}
	}
}


void LuftikusAudioProcessorEditor::updateSliders()
{
	if (mastering.getToggleState())
	{
		for (int i=0; i<EqDsp::kShelfHi; ++i)
		{
			sliders[i].setValue((double) int(0.5 + sliders[i].getValue()), sendNotificationAsync);
			sliders[i].setRange(-10, 10, 1);
		}
		sliders[EqDsp::kShelfHi].setValue(0.5 * int(0.5 + 2*sliders[EqDsp::kShelfHi].getValue()), sendNotificationAsync);
		sliders[EqDsp::kShelfHi].setRange(0, 10, 0.5);
	}
	else
	{
		for (int i=0; i<EqDsp::kShelfHi; ++i)
		{
			sliders[i].setRange(-10, 10, 0.1);
		}

		sliders[EqDsp::kShelfHi].setRange(0, 10, 0.05);
	}
}

void LuftikusAudioProcessorEditor::updateTooltipState()
{
	const bool curState = tooltips != nullptr;

	if (Proc->showTooltips != curState)
		tooltips = Proc->showTooltips ? new TooltipWindow() : nullptr;
		
}
